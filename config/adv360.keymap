#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/rgb.h>
#include <dt-bindings/zmk/backlight.h>

// The default layer is 0
#define FUNCTION 1
#define MOD      2
#define WM 3
#define NAV 4
#define NUM 5
#define SYMBOL 6
#define TMUX 7




/ {
    behaviors {
      #include "macros.dtsi"
      #include "version.dtsi"
      #ifndef VERSION_MACRO
      macro_ver: macro_ver {
        compatible = "zmk,behavior-macro";
        label = "macro_version";
        #binding-cells = <0>;
        bindings = <&kp RET>;
      };
      #endif

     slctrl: smart_left_control {
          compatible = "zmk,behavior-mod-morph";
          label = "SMART_LEFT_CONTROL";
          #binding-cells = <0>;
          bindings = <&hm LCTRL ESC>, <&hm LESS_THAN LEFT_PARENTHESIS>;
          mods = <(MOD_LSFT | MOD_RSFT)>;
        };
     srctrl: smart_right_control {
          compatible = "zmk,behavior-mod-morph";
          label = "SMART_RIGHT_CONTROL";
          #binding-cells = <0>;
          bindings = <&mt_sl RCTRL TMUX>, <&hm GREATER_THAN RIGHT_PARENTHESIS>;
          mods = <(MOD_LSFT | MOD_RSFT)>;
        };
     slbracket: smart_left_bracket {
          compatible = "zmk,behavior-mod-morph";
          label = "SMART_LEFT_BRACKET";
          #binding-cells = <0>;
          bindings = <&hm LSHIFT LEFT_BRACKET>, <&hm HOME LEFT_BRACE>;
          mods = <(MOD_LSFT | MOD_RSFT)>;
        };
     srbracket: smart_right_bracket {
          compatible = "zmk,behavior-mod-morph";
          label = "SMART_RIGHT_BRACKET";
          #binding-cells = <0>;
          bindings = <&hm RSHIFT RIGHT_BRACKET>, <&hm END RIGHT_BRACE>;
          mods = <(MOD_LSFT | MOD_RSFT)>;
        };

     sgrave: smart_grave {
          compatible = "zmk,behavior-mod-morph";
          label = "SMART_GRAVE";
          #binding-cells = <0>;
          bindings = <&ht_triple_backtic 0 GRAVE>, <&kp TILDE>;
          mods = <(MOD_LSFT | MOD_RSFT)>;
        };

     lsgui: left_smart_gui {
          compatible = "zmk,behavior-mod-morph";
          label = "LEFT_SMART_GUI";
          #binding-cells = <0>;
          bindings = <&mt_sl LGUI WM>, <&macro_home_dir>;
          mods = <(MOD_RGUI)>;
        };
     rsgui: right_smart_gui {
          compatible = "zmk,behavior-mod-morph";
          label = "RIGHT_SMART_GUI";
          #binding-cells = <0>;
          bindings = <&mt_sl RGUI WM>, <&macro_dir_up>;
          mods = <(MOD_LGUI)>;
        };
     lssh: left_smart_shift {
          compatible = "zmk,behavior-mod-morph";
          label = "LEFT_SMART_SHIFT";
          #binding-cells = <0>;
          bindings = <&sk LSHIFT>, <&caps_word>;
          mods = <(MOD_LSFT)>;
        };
     rssh: right_smart_shift {
           compatible = "zmk,behavior-mod-morph";
           label = "RIGHT_SMART_SHIFT";
           #binding-cells = <0>;
           bindings = <&sk RSHIFT>, <&caps_word>;
           mods = <(MOD_RSFT)>;
        };

      email: used_emails {
            compatible = "zmk,behavior-mod-morph";
            label = "USED_EMAILS";
            #binding-cells = <0>;
            bindings = <&macro_personal_email>, <&macro_work_email>;
            mods = <(MOD_RSFT)>;
        };

      hm: homerow_mods {
          compatible = "zmk,behavior-hold-tap";
          label = "HOMEROW_MODS";
          #binding-cells = <2>;
          tapping-term-ms = <200>;
          quick_tap_ms = <175>;
          global-quick-tap;
          flavor = "tap-preferred";
          bindings = <&kp>, <&kp>;
      };

      // mode-tap(mt) with sticky layer(sl) activated on tap.
      mt_sl: behavior_mo_tog {
            compatible = "zmk,behavior-hold-tap";
            label = "mo_tog";
            #binding-cells = <2>;
            flavor = "hold-preferred";
            tapping-term-ms = <200>;
            bindings = <&kp>, <&sl>;
        };

      td0: tap_dance_0 {
           compatible = "zmk,behavior-tap-dance";
           label = "TAP_DANCE_0";
           #binding-cells = <0>;
           tapping-term-ms = <200>;
           bindings = <&kp LGUI>, <&kp LG(LSHFT)>;
      };

      td1: tap_dance_1 {
           compatible = "zmk,behavior-tap-dance";
           label = "TAP_DANCE_1";
           #binding-cells = <0>;
           tapping-term-ms = <200>;
           bindings = <&kp RGUI>, <&kp RG(RSHFT)>;
      };

      // tab-dance for i3

      tdws1: tap_dance_i3_workspace_1{
           compatible = "zmk,behavior-tap-dance";
           label = "TAP_DANCE_I3_WORKSPACE_1";
           #binding-cells = <0>;
           tapping-term-ms = <200>;
           bindings = <&hm LG(LS(N1)) LG(N1)>, <&kp LG(LC(LS(N1)))>;
      };

      tdws2: tap_dance_i3_workspace_2{
           compatible = "zmk,behavior-tap-dance";
           label = "TAP_DANCE_I3_WORKSPACE_2";
           #binding-cells = <0>;
           tapping-term-ms = <200>;
           bindings = <&hm LG(LS(N2)) LG(N2)>, <&kp LG(LC(LS(N2)))>;
      };
      tdws3: tap_dance_i3_workspace_3{
           compatible = "zmk,behavior-tap-dance";
           label = "TAP_DANCE_I3_WORKSPACE_3";
           #binding-cells = <0>;
           tapping-term-ms = <200>;
           bindings = <&hm LG(LS(N3)) LG(N3)>, <&kp LG(LC(LS(N3)))>;
      };
      tdws4: tap_dance_i3_workspace_4{
           compatible = "zmk,behavior-tap-dance";
           label = "TAP_DANCE_I3_WORKSPACE_4";
           #binding-cells = <0>;
           tapping-term-ms = <200>;
           bindings = <&hm LG(LS(N4)) LG(N4)>, <&kp LG(LC(LS(N4)))>;
      };
      tdws5: tap_dance_i3_workspace_5{
           compatible = "zmk,behavior-tap-dance";
           label = "TAP_DANCE_I3_WORKSPACE_5";
           #binding-cells = <0>;
           tapping-term-ms = <200>;
           bindings = <&hm LG(LS(N5)) LG(N5)>, <&kp LG(LC(LS(N5)))>;
      };
      tdws6: tap_dance_i3_workspace_6{
           compatible = "zmk,behavior-tap-dance";
           label = "TAP_DANCE_I3_WORKSPACE_6";
           #binding-cells = <0>;
           tapping-term-ms = <200>;
           bindings = <&hm LG(LS(N6)) LG(N6)>, <&kp LG(LC(LS(N6)))>;
      };
      tdws7: tap_dance_i3_workspace_7{
           compatible = "zmk,behavior-tap-dance";
           label = "TAP_DANCE_I3_WORKSPACE_7";
           #binding-cells = <0>;
           tapping-term-ms = <200>;
           bindings = <&hm LG(LS(N7)) LG(N7)>, <&kp LG(LC(LS(N7)))>;
      };
      tdws8: tap_dance_i3_workspace_8{
           compatible = "zmk,behavior-tap-dance";
           label = "TAP_DANCE_I3_WORKSPACE_8";
           #binding-cells = <0>;
           tapping-term-ms = <200>;
           bindings = <&hm LG(LS(N8)) LG(N8)>, <&kp LG(LC(LS(N8)))>;
      };
      tdws9: tap_dance_i3_workspace_9{
           compatible = "zmk,behavior-tap-dance";
           label = "TAP_DANCE_I3_WORKSPACE_9";
           #binding-cells = <0>;
           tapping-term-ms = <200>;
           bindings = <&hm LG(LS(N9)) LG(N9)>, <&kp LG(LC(LS(N9)))>;
      };
      tdws10: tap_dance_i3_workspace_10{
           compatible = "zmk,behavior-tap-dance";
           label = "TAP_DANCE_I3_WORKSPACE_10";
           #binding-cells = <0>;
           tapping-term-ms = <200>;
           bindings = <&hm LG(LS(N0)) LG(N0)>, <&kp LG(LC(LS(N0)))>;
      };
      // end of tap-dance for i3



      dtbspace: double_tap_backspace {
           compatible = "zmk,behavior-tap-dance";
           label = "DOUBLE_TAP_BACKSPACE";
           #binding-cells = <0>;
           tapping-term-ms = <150>;
           bindings = <&kp BSPC>, <&kp RC(BSPC)>;
      };

      sbspace: smart_back_space {
           compatible = "zmk,behavior-mod-morph";
           label = "SMART_BACK_SPACE";
           #binding-cells = <0>;
           bindings = <&hm RC(BSPC) BSPC>, <&hm RC(DEL) DEL>;
           mods = <(MOD_LSFT | MOD_RSFT)>;
        };

      ht_select_all_and_copy: select_all_and_copy {
          compatible = "zmk,behavior-hold-tap";
          label = "SELECT_ALL_AND_COPY";
          #binding-cells = <2>;
          tapping-term-ms = <200>;
          quick_tap_ms = <175>;
          global-quick-tap;
          flavor = "tap-preferred";
          bindings = <&macro_select_all_and_copy_it>, <&kp>;
      };
      ht_not_equal_to_operator: not_equal_to_operator {
          compatible = "zmk,behavior-hold-tap";
          label = "NOT_EQUAL_TO_OPERATOR";
          #binding-cells = <2>;
          tapping-term-ms = <200>;
          quick_tap_ms = <175>;
          global-quick-tap;
          flavor = "tap-preferred";
          bindings = <&macro_not_equal_to_operator>, <&kp>;
      };
      ht_triple_backtic: triple_backtic {
          compatible = "zmk,behavior-hold-tap";
          label = "TRIPLE_BACKTIC";
          #binding-cells = <2>;
          tapping-term-ms = <200>;
          quick_tap_ms = <175>;
          global-quick-tap;
          flavor = "tap-preferred";
          bindings = <&macro_triple_backtick>, <&kp>;
      };
      //tmux bindings
      ht_tmux_smart_kill: ht_tmux_smart_kill {
          compatible = "zmk,behavior-hold-tap";
          label = "TMUX_SMART_KILL";
          #binding-cells = <2>;
          tapping-term-ms = <200>;
          quick_tap_ms = <175>;
          global-quick-tap;
          flavor = "tap-preferred";
          bindings = <&macro_tmux_kill_session>, <&macro_tmux_kill_window_or_pane>;
      };
      ht_tmux_smart_left_bracket: ht_tmux_smart_left_bracket {
          compatible = "zmk,behavior-hold-tap";
          label = "TMUX_SMART_LEFT_BRACKET";
          #binding-cells = <2>;
          tapping-term-ms = <200>;
          quick_tap_ms = <175>;
          global-quick-tap;
          flavor = "tap-preferred";
          bindings = <&macro_tmux_go_into_select_mode>, <&macro_tmux_move_window_left>;
      };
      ht_tmux_smart_create: ht_tmux_smart_create {
          compatible = "zmk,behavior-hold-tap";
          label = "TMUX_SMART_CREATE";
          #binding-cells = <2>;
          tapping-term-ms = <200>;
          quick_tap_ms = <175>;
          global-quick-tap;
          flavor = "tap-preferred";
          bindings = <&macro_tmux_new_session>, <&macro_tmux_new_window>;
      };
      ht_tmux_smart_rename: ht_tmux_smart_rename {
          compatible = "zmk,behavior-hold-tap";
          label = "TMUX_SMART_RENAME";
          #binding-cells = <2>;
          tapping-term-ms = <200>;
          quick_tap_ms = <175>;
          global-quick-tap;
          flavor = "tap-preferred";
          bindings = <&macro_tmux_rename_session>, <&macro_tmux_rename_window>;
      };

      ht_tmux_smart_restore: ht_tmux_smart_restore {
          compatible = "zmk,behavior-hold-tap";
          label = "TMUX_SMART_RESTORE";
          #binding-cells = <2>;
          tapping-term-ms = <200>;
          quick_tap_ms = <175>;
          global-quick-tap;
          flavor = "tap-preferred";
          bindings = <&macro_tmux_load_session>, <&macro_tmux_save_session>;
      };
      ht_tmux_smart_switch: ht_tmux_smart_swith {
          compatible = "zmk,behavior-hold-tap";
          label = "TMUX_SMART_SWITCH";
          #binding-cells = <2>;
          tapping-term-ms = <200>;
          quick_tap_ms = <175>;
          global-quick-tap;
          flavor = "tap-preferred";
          bindings = <&macro_tmux_switch_to_last_session>, <&macro_tmux_switch_to_last_window>;
      };
      ht_tmux_smart_yank: ht_tmux_smart_yank {
          compatible = "zmk,behavior-hold-tap";
          label = "TMUX_SMART_YANK";
          #binding-cells = <2>;
          tapping-term-ms = <200>;
          quick_tap_ms = <175>;
          global-quick-tap;
          flavor = "tap-preferred";
          bindings = <&macro_tmux_extrakto_plugin>, <&macro_tmux_thumbs_plugin>;
      };
      ht_tmux_smart_yank_prompt: ht_tmux_smart_yank_prompt {
          compatible = "zmk,behavior-hold-tap";
          label = "TMUX_SMART_YANK_PROMPT";
          #binding-cells = <2>;
          tapping-term-ms = <200>;
          quick_tap_ms = <175>;
          global-quick-tap;
          flavor = "tap-preferred";
          bindings = <&macro_tmux_copy_pwd >, <&macro_tmux_copy_current_line>;
      };
      // double tap smart yank
      dtsyank: double_tap_smart_yank {
           compatible = "zmk,behavior-tap-dance";
           label = "DOUBLE_TAP_SMART_YAMK";
           #binding-cells = <0>;
           tapping-term-ms = <150>;
           bindings = <&ht_tmux_smart_yank 0 0>, <&ht_tmux_smart_yank_prompt 0 0>;
      };
    };

  keymap {
    compatible = "zmk,keymap";

    default_layer {
      bindings = <
        &kp EQUAL                   &kp N1                          &kp N2                &kp N3                &kp N4               &kp N5       &none                                                                                                                                   &mo MOD &kp N6 &kp N7                &kp N8    &kp N9   &kp N0            &kp MINUS
        &kp DEL                     &kp Q                           &kp W                 &kp E                 &hm LC(R) R          &hm LC(T) T  &email                                                                                                                                  &none   &kp Y  &kp U                 &kp I     &kp O    &kp P             &hm PIPE BSLH
        &hm LC(T) LC(R)             &ht_select_all_and_copy 0 A     &kp S                 &lt SYMBOL D          &lt NUM F            &kp G        &none           &slctrl             &hm LALT EQUAL                   &hm RALT MINUS     &srctrl                                         &none   &kp H  &kp J                 &kp K     &kp L    &hm COLON SEMI    &hm SQT DQT
        &lssh                       &kp Z                           &hm LC(X) X           &hm LC(C) C           &hm LC(V) V          &kp B                                            &slbracket                       &srbracket                                                         &kp N  &kp M                 &kp COMMA &kp DOT  &hm QMARK FSLH    &rssh
        &mo FUNCTION                &sgrave                         &kp PRINTSCREEN       &kp LEFT              &kp RIGHT                                &sbspace &lt NAV TAB         &lsgui                           &rsgui             &hm LS(ENTER) ENTER       &kp SPACE                            &kp DOWN              &kp UP    &kp LBKT &kp RBKT          &mo FUNCTION
      >;
    };
    fn {
      bindings = <
        &kp F1 &kp F2 &kp F3 &kp F4          &kp F5            &kp F6      &none                                                       &mo MOD &kp F7 &kp F8 &kp F9 &kp F10 &kp F11 &kp F12
        &trans &trans &trans &trans          &trans            &trans      &none                                                       &none   &trans &trans &trans &trans  &trans  &trans
        &trans &trans &trans &kp C_VOLUME_UP &kp C_VOLUME_DOWN &kp C_MUTE  &none        &trans &trans             &trans &trans        &none   &trans &trans &trans &trans  &trans  &trans
        &trans &trans &trans &trans          &trans            &trans                          &trans             &trans                       &trans &trans &trans &trans  &trans  &trans
        &trans &trans &trans &trans          &trans                              &trans &trans &trans             &trans &trans &trans                &trans &trans &trans  &trans  &trans
      >;
    };
    mod {
      bindings = <
        &none &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3 &bt BT_SEL 4 &none                                                                        &trans                 &none        &none        &none        &none &none &none
        &none &none        &none        &none        &none        &none        &bootloader                                                                  &bootloader            &none        &none        &none        &none &none &none
        &none &none        &none        &none        &none        &none        &none                   &none &none    &bt BT_CLR &none                      &rgb_ug RGB_MEFS_CMD 5 &none        &none        &none        &none &none &none
        &none &none        &none        &none        &none        &none                                      &none    &none                                                        &none        &none        &none        &none &none &none
        &none &none        &none        &none        &none                                       &none &none &none    &none      &bl BL_TOG &rgb_ug RGB_TOG                                     &bl BL_INC   &bl BL_DEC   &none &none &none
      >;
    };
    wm {
      bindings = <
        &kp F1 &kp F2 &kp F3               &kp F4             &kp F5             &kp F6  &none                                                                          &mo MOD &kp F7   &kp F8                &kp F9                &kp F10                &kp F11 &kp F12
        &trans &trans &kp LG(LC(LS(N1)))   &kp LG(LC(LS(N2))) &kp LG(LC(LS(N3))) &trans  &none                                                                          &none   &trans   &tdws1                &tdws2                &tdws3                 &trans  &trans
        &trans &trans &kp LG(LC(LS(N4)))   &kp LG(LC(LS(N5))) &kp LG(LC(LS(N6))) &trans  &none        &trans &trans                         &trans        &trans        &none   &trans   &tdws4                &tdws5                &tdws6                 &trans  &trans
        &trans &trans &kp LG(LC(LS(N7)))   &kp LG(LC(LS(N8))) &kp LG(LC(LS(N9))) &trans                      &trans                         &trans                              &trans   &tdws7                &tdws8                &tdws9                 &trans  &trans
        &trans &trans &trans               &trans             &trans                           &trans &kp LG(TAB) &kp LG(LSHFT)             &kp RG(RSHFT) &trans &tdws10                 &trans                &trans                &trans                 &trans  &trans
      >;
    };
    nav {
      bindings = <
        &kp F1 &kp F2 &kp F3 &kp F4 &kp F5 &kp F6  &none                                                       &mo MOD &kp F7   &kp F8   &kp F9 &kp F10    &kp F11 &kp F12
        &trans &trans &trans &trans &trans &trans  &none                                                       &none   &trans   &trans   &trans &trans     &trans  &trans
        &trans &trans &trans &trans &trans &trans  &none        &trans &trans             &trans &trans        &none   &kp LEFT &kp DOWN &kp UP &kp RIGHT  &trans  &trans
        &trans &trans &trans &trans &trans &trans                      &trans             &trans                       &trans   &trans   &trans &trans     &trans  &trans
        &trans &trans &trans &trans &trans               &trans &trans &trans             &trans &trans &trans                  &trans   &trans &trans     &trans  &trans
      >;
    };
    num {
      bindings = <
        &kp F1 &kp F2 &kp F3 &kp F4 &kp F5 &kp F6  &none                                                       &mo MOD &kp F7 &kp F8             &kp F9           &kp F10       &kp F11 &kp F12
        &trans &trans &trans &trans &trans &trans  &none                                                       &none   &trans &hm EXCLAMATION N1 &hm AT_SIGN N2   &hm POUND N3  &trans  &trans
        &trans &trans &trans &trans &trans &trans  &none        &trans &trans             &trans &trans        &none   &trans &hm DOLLAR N4      &hm PERCENT N5   &hm CARET N6  &trans  &trans
        &trans &trans &trans &trans &trans &trans                      &trans             &trans                       &trans &hm AMPERSAND N7   &hm ASTERISK N8  &kp N9        &trans  &trans
        &trans &trans &trans &trans &trans               &trans &trans &trans             &trans &trans &kp N0                &trans             &trans           &trans        &trans  &trans
      >;
    };
    symbol {
      bindings = <
        &kp F1 &kp F2 &kp F3 &kp F4 &kp F5 &kp F6  &none                                                       &mo MOD &kp F7 &kp F8                                    &kp F9             &kp F10          &kp F11 &kp F12
        &trans &trans &trans &trans &trans &trans  &none                                                       &none   &trans &ht_not_equal_to_operator 0 EXCLAMATION   &kp AT             &kp POUND        &trans  &trans
        &trans &trans &trans &trans &trans &trans  &none        &trans &trans             &trans &trans        &none   &trans &kp DOLLAR                                &kp PERCENT        &kp CARET        &trans  &trans
        &trans &trans &trans &trans &trans &trans                      &trans             &trans                       &trans &kp AMPERSAND                             &kp ASTERISK       &trans           &trans  &trans
        &trans &trans &trans &trans &trans               &trans &trans &trans             &trans &trans &trans                &trans                                    &trans             &trans           &trans  &trans
      >;
    };
    tmux {
      bindings = <
        &kp F1 &kp F2 &kp F3                                       &kp F4                    &kp F5                          &kp F6                    &none                                                                                                                                                             &mo MOD &kp F7                            &kp F8                         &kp F9                          &kp F10                         &kp F11                           &kp F12
        &trans &trans &trans                                       &trans                    &ht_tmux_smart_rename 0 0       &trans                    &none                                                                                                                                                             &none   &dtsyank                          &macro_tmux_go_to_window_one   &macro_tmux_go_to_window_two    &macro_tmux_go_to_window_three  &trans                            &trans
        &trans &trans &macro_tmux_list_sessions                    &macro_tmux_detach        &macro_tmux_search              &macro_tmux_open_lazygit  &none                     &trans                    &trans                                        &trans &trans                                                   &none   &macro_tmux_horizontal_pane_split &macro_tmux_go_to_window_four  &macro_tmux_go_to_window_five   &macro_tmux_go_to_window_six    &trans                            &trans
        &trans &macro_tmux_zoom_pane &trans                        &ht_tmux_smart_kill 0 0   &macro_tmux_vertical_pane_split &ht_tmux_smart_restore 0 0                                                    &ht_tmux_smart_left_bracket 0 0               &macro_tmux_move_window_right                                           &trans                            &macro_tmux_go_to_window_seven &macro_tmux_go_to_window_eighth &macro_tmux_go_to_window_nine   &macro_tmux_copy_mode_search_up   &trans
        &trans &trans &trans                                       &trans                    &trans                                                                       &trans &ht_tmux_smart_switch 0 0 &trans                                        &trans &ht_tmux_smart_create 0 0  &kp N0                                                                  &trans                         &trans                          &trans                          &trans                            &trans
      >;
    };
  };
};
